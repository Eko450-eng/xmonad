#+TITLE: xmonad
#+PROPERTY: header-args :tangle xmonad.hs
#+STARTUP: overview

* Imports
#+begin_src haskell
import XMonad
import Data.Monoid
import System.Exit
import System.IO

import XMonad.Util.EZConfig
import XMonad.Util.SpawnOnce
import XMonad.Util.Run

import XMonad.Layout.MultiToggle
import XMonad.Layout.MultiToggle.Instances
import XMonad.Layout.NoBorders
import XMonad.Layout.ThreeColumns
import XMonad.Layout.Spacing

import XMonad.Layout.ToggleLayouts

import XMonad.Config.Desktop

import XMonad.Actions.CycleWS

import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.Place
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.DynamicLog (dynamicLogWithPP, wrap, xmobarPP, xmobarColor, shorten, PP(..))
import Colors.DoomOne

import qualified XMonad.StackSet as W
import qualified Data.Map        as M
#+end_src

* Variables
** Colors
#1c2023
#c7ccd1
#c0c5ce
#ff5050
#1c2023
#ffffff
#ffd47e
#95c7ae
#000000
#c23127
#6790eb
#c7ae95
#4c566a
#282c34
#212121
#4c566a
#2aa899
#abb2bf
#81a1c1
#56b6c2
#1c2023
#245361
#4c566a
#282c34
** Defaults
#+begin_src haskell
myTerminal      = "kitty"
myBrowser       = "brave"
home            = "/home/eko"
myModMask       = mod4Mask
myBorderWidth   = 1
myNormalBorderColor  = "#c0c5ce"
myFocusedBorderColor = "#2aa899"
#+end_src
** Whether focus follows the mouse pointer.
#+begin_src haskell
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True
#+end_src

** Whether clicking on a window to focus also passes the click to the window
#+begin_src haskell
myClickJustFocuses :: Bool
myClickJustFocuses = False
#+end_src
* Workspaces
A tagging example: > workspaces = ["web", "irc", "code" ] ++ map show [4..9]
#+begin_src haskell
myWorkspaces    = [ "\xf268"
                  , "\xf121"
                  , "\xf392"
                  , "\xf167"
                  , "\xf11b"
                  , "\xf120"
                  , "\xf799"
                  , "\xf0e0"
                  , "\xf1f8"
                ]
-- myWorkspaces    = [ "1"
--                   , "2"
--                   , "3"
--                   , "4"
--                   , "5"
--                   , "6"
--                   , "7"
--                   , "8"
--                   , "9"
--                 ]
#+end_src
* Keybinds
** Ignore
#+begin_src haskell
myKeys = \c -> mkKeymap c $
#+end_src
** Super keys
*** Just super keys
    #+begin_src haskell
        [ ("M-<Return>", spawn $ terminal c)
        , ("M-<Escape>", spawn "betterlockscreen -l -w dim")
        , ("M-<Space>", nextScreen)
        , ("M-a", spawn "rofi -show emoji -modi emoji")
        , ("M-b", spawn "brave")
        , ("M-d", spawn "rofi -show drun")
        , ("M-e", spawn "emacsclient -c -a 'emacs'")
        , ("M-g", spawn "/home/eko/.config/qtile/scripts/checkForGlava.sh alacritty")
        , ("M-i", spawn "clipmenu")
        , ("M-m", sendMessage ToggleLayout)
        , ("M-n", spawn "nautilus")
        , ("M-o", spawn "pulseaudio-control --volume-max 130 down")
        , ("M-p", spawn "pulseaudio-control --volume-max 130 up")
        , ("M-q", kill)
        , ("M-r", spawn "neovide")
        , ("M-s", spawn "deepin-screenshot")
        , ("M-t", sendMessage NextLayout)
        , ("M-z", spawn "/home/eko/.config/fish/functions/toggleAudio.sh")
    #+end_src
*** Super shift keys
    #+begin_src haskell
        , ("M-S-<Space>", shiftNextScreen)
        , ("M-S-d", spawn "rofi -show calc -no-show-match -no-sort")
        , ("M-S-g", spawn "/home/eko/.config/qtile/scripts/checkForGlava.sh glava")
        , ("M-S-o", spawn "pactl -- set-sink-volume 0 -10%")
        , ("M-S-p", spawn "pactl -- set-sink-volume 0 +10%")
        , ("M-S-r", spawn "killall polybar; xmonad --recompile; xmonad --restart")
    #+end_src
*** Super Shift Ctrl keys
#+begin_src haskell
    , ("M-S-C-x", io (exitWith ExitSuccess) )
#+end_src
*** Super Ctrl keys
#+begin_src haskell
    , ("M-C-<Esc>", spawn "systemctl suspend")
    , ("M-C-d", spawn "rofi -show window")
#+end_src
** Alt keys
*** Just Alt
#+begin_src haskell
    , ("M1-p", spawn "pavucontrol")
    , ("M1-o", spawn "~/.config/scripts/changeOutput.sh")
    , ("M1-w", spawn "killall polybar")
    , ("M1-r", spawn "polybar")
#+end_src
*** Alt Ctrl keys
#+begin_src haskell
    , ("M1-C-o", spawn "/home/eko/.config/qtile/scripts/picom-toggle.sh")
    , ("M1-C-t", spawn "xterm")
#+end_src

** Etc
*** screenshot
#+begin_src haskell
    , ("<Print>", spawn "flameshot full -p /home/eko/Pictures")
#+end_src
*** Music and Video controll
#+begin_src haskell
    , ("M-c", spawn "playerctl play-pause")
    , ("M-S-v", spawn "playerctl next")
    , ("M-S-x", spawn "playerctl previous")
#+end_src
*** Navigation and Resize
#+begin_src haskell
    , ("M-j", windows W.focusDown)
    , ("M-k", windows W.focusUp)
    , ("M-S-j", windows W.swapDown)
    , ("M-S-k", windows W.swapUp)
    , ("M-C-j", sendMessage Shrink)
    , ("M-C-k", sendMessage Expand)

    , ("M-h", windows W.focusDown)
    , ("M-l", windows W.focusUp)
    , ("M-S-h", windows W.swapDown)
    , ("M-S-l", windows W.swapUp)
    , ("M-C-h", sendMessage Shrink)
    , ("M-C-l", sendMessage Expand)
    -- Shrink/expand the master area
    -- (De)Increment the number of windows in the master area
    -- , ("M-,", sendMessage IncMasterN +1)
    -- , ("M-.", sendMessage IncMasterN -1)
#+end_src
*** Layout
#+begin_src haskell
    --  Reset the layouts on the current workspace to default
    -- , ("M-S-<Space>", setLayout $ myLayout.tiled)
    , ("M-S-<Return>", windows W.swapMaster)
    , ("M-m", windows W.focusMaster)
    , ("M-n", refresh)
    , ("M-S-t", withFocused $ windows . W.sink)
#+end_src
*** Unused (Statusbar)
#+begin_src haskell
    -- Toggle the status bar gap
    -- Use this binding with avoidStruts from Hooks.ManageDocks.
    -- See also the statusBar function from Hooks.DynamicLog.
    -- , ((modm              , xK_b     ), sendMessage ToggleStruts)

    ]
#+end_src
*** Workspaces
#+begin_src haskell
    ++
    [("M-" ++ m ++ k, windows $ f i)
        | (i, k) <- zip (myWorkspaces) (map show([1 .. 9] ++ [0] :: [Int]))
        , (f, m) <- [(W.greedyView, ""), (W.shift, "S-")]]
#+end_src
* Mouse bindings
Mouse bindings: default actions bound to mouse events
#+begin_src haskell
myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $

    -- mod-button1, Set the window to floating mode and move by dragging
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))

    -- mod-button2, Raise the window to the top of the stack
    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))

    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))

    -- you may also bind events to the mouse scroll wheel (button4 and button5)
    ]
#+end_src

* Layouts
Layouts:

You can specify and transform your layouts by modifying these values.
If you change layout bindings be sure to use 'mod-shift-space' after
restarting (with 'mod-q') to reset your layout state to the new
defaults, as xmonad preserves your old layout settings by default.

The available layouts.  Note that each layout is separated by |||,
which denotes layout choice.

#+begin_src haskell
myLayout = spacingWithEdge 5 $ avoidStruts $ smartBorders (threeCol ||| tiled ||| Mirror tiled ||| Full )
  where
     threeCol   = ThreeCol nmaster delta ratio
     tiled   = Tall nmaster delta ratio
     nmaster = 1
     ratio   = 1/2
     delta   = 3/100
#+end_src
* Window rules
** Info
Execute arbitrary actions and WindowSet manipulations when managing
a new window. You can use this to, for example, always float a
particular program, or have a client always appear on a particular
workspace.

To find the property name associated with a program, use
> xprop | grep WM_CLASS
and click on the client you're interested in.

To match on the WM_NAME, you can use 'title' in the same way that
'className' and 'resource' are used below.
** Code
#+begin_src haskell
myManageHook = composeAll
    [ className =? "Gimp"           --> doFloat
    , resource  =? "desktop_window" --> doIgnore
    , resource  =? "kdesktop"       --> doIgnore
    , className =? "Alacritty"      --> hasBorder False
    , className =? "GLava"          --> hasBorder False
    , className =? "Alacritty"      --> doRectFloat (W.RationalRect 0.5 0 0.1 0.15)
    , className =? "GLava"          --> doRectFloat (W.RationalRect 1 1 0.1 0.1)
    ]

#+end_src
* Events
Event handling

EwmhDesktops users should change this to ewmhDesktopsEventHook

Defines a custom handler function for X Events. The function should
return (All True) if the default handler is to be run afterwards. To
combine event hooks use mappend or mconcat from Data.Monoid.
#+begin_src haskell
myEventHook = mempty
#+end_src

* Status bar
Status bars and logging

Perform an arbitrary action on each internal state change or X event.
See the 'XMonad.Hooks.DynamicLog' extension for examples.
#+begin_src haskell
#+end_src
* Startup hook
Perform an arbitrary action each time xmonad starts or is restarted
with mod-q.  Used by, e.g., XMonad.Layout.PerWorkspace to initialize
per-workspace layout choices.

#+begin_src haskell
myStartupHook = do
  spawn "ps cax | grep clipmenud ; if ! [ $? -eq 0 ]; then clipmenud; fi"
  spawn "ps cax | grep polybar ; if ! [ $? -eq 0 ]; then polybar; fi"
  spawnOnce "wallpaperChanger"
  spawnOnce "emacs /usr/bin/emacs --daemon"
  spawnOnce "xset s off -dpms"
  spawnOnce "/home/eko/.config/qtile/scripts/mouseAccel.sh"
  spawnOnce "picom --config /home/eko/.config/picom/picom.conf"
  spawnOnce "dunst"
#+end_src
* Main
#+begin_src haskell
main = do
    -- xmproc0 <- spawnPipe "xmobar -x 2 /home/eko/.config/xmonad/xmobarrc0"
    -- xmproc1 <- spawnPipe "xmobar -x 2 /home/eko/.config/xmonad/xmobarrc1"
    -- xmproc2 <- spawnPipe "xmobar -x 2 /home/eko/.config/xmonad/xmobarrc2"
    xmonad $ docks $ ewmhFullscreen $ ewmh def
        { terminal           = myTerminal
        , focusFollowsMouse  = myFocusFollowsMouse
        , clickJustFocuses   = myClickJustFocuses
        , borderWidth        = myBorderWidth
        , modMask            = myModMask
        , workspaces         = myWorkspaces
        , normalBorderColor  = myNormalBorderColor
        , focusedBorderColor = myFocusedBorderColor
        , keys               = myKeys
        , mouseBindings      = myMouseBindings
        , layoutHook         = myLayout
        , manageHook         = myManageHook
        , handleEventHook    = myEventHook
        , startupHook        = myStartupHook
        -- , logHook            = dynamicLogWithPP $ xmobarPP
        --         { ppOutput = hPutStrLn xmproc0
        --         , ppCurrent = xmobarColor "#95c7ae" "" . wrap
        --                     ("<box type=Bottom width=2 mb=2 color=#95c7ae>") "</box>"
        --         , ppVisible = xmobarColor "#2aa899" ""
        --         , ppHidden = xmobarColor "#2aa899" "" . wrap
        --                     ("<box type=Top width=2 mt=1 color=#2aa899>") "</box>"
        --         , ppHiddenNoWindows = xmobarColor "#56b6c2" ""
        --         , ppTitle = xmobarColor "#2aa899" "" . shorten 60
        --         , ppSep =  "<fc=#ffd47e> | </fc>"
        --         , ppUrgent = xmobarColor "#ff5050" "" . wrap "!" "!"
        --         , ppOrder = \(ws:l:_:_) -> [ws,l]
        --     }
        }
#+end_src
