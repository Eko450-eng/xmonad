--
-- xmonad example config file.
--
-- A template showing all available configuration hooks,
-- and how to override the defaults in your own xmonad.hs conf file.
--
-- Normally, you'd only override those defaults you care about.
--

import XMonad
import Data.Monoid
import System.Exit

import XMonad.Util.EZConfig
import XMonad.Util.SpawnOnce
import XMonad.Util.Run

import XMonad.Actions.CycleWS

import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.ManageDocks

import qualified XMonad.StackSet as W
import qualified Data.Map        as M

-- The preferred terminal program, which is used in a binding below and by
-- certain contrib modules.
--
myTerminal      = "xterm"
myBrowser       = "brave"
home            = "/home/eko"

-- Whether focus follows the mouse pointer.
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True

-- Whether clicking on a window to focus also passes the click to the window
myClickJustFocuses :: Bool
myClickJustFocuses = False

myBorderWidth   = 1
myModMask       = mod4Mask

-- The default number of workspaces (virtual screens) and their names.
-- By default we use numeric strings, but any string may be used as a
-- workspace name. The number of workspaces is determined by the length
-- of this list.
--
-- A tagging example:
--
-- > workspaces = ["web", "irc", "code" ] ++ map show [4..9]
--
myWorkspaces    = ["1","2","3","4","5","6","7","8","9"]

-- Border colors for unfocused and focused windows, respectively.
--
myNormalBorderColor  = "#dddddd"
myFocusedBorderColor = "#ff0000"

------------------------------------------------------------------------
-- Key bindings. Add, modify or remove key bindings here.
--
myKeys = \c -> mkKeymap c $
    [ ("M-<Return>", spawn $ terminal c)
    , ("M-<Escape>", spawn "betterlockscreen -l -w dim")
    , ("M-<Space>", nextScreen)
    , ("M-a", spawn "rofi -show emoji -modi emoji")
    , ("M-b", spawn "brave")
    , ("M-d", spawn "rofi -show drun")
    , ("M-e", spawn "emacsclient -c -a 'emacs'")
    , ("M-g", spawn "/home/eko/.config/qtile/scripts/checkForGlava.sh alacritty")
    , ("M-i", spawn "clipmenu")
    , ("M-q", kill)
    , ("M-t", sendMessage NextLayout)
    , ("M-n>", spawn "command")

    , ("M-S-<Return>", spawn "nautilus")
    , ("M-S-<Space>", shiftNextScreen)
    , ("M-S-d", spawn "rofi -show calc -no-show-match -no-sort")
    , ("M-S-g", spawn "killall glava")
    , ("M-S-r", spawn "xmonad --recompile; xmonad --restart")
    , ("M-S-g", spawn "/home/eko/.config/qtile/scripts/checkForGlava.sh glava")

    , ("M-S-C-x", io (exitWith ExitSuccess) )

    , ("M-C-<Esc>", spawn "systemctl suspend")
    , ("M-C-d", spawn "rofi -show window")

    , ("M1-C-o", spawn "/home/eko/.config/qtile/scripts/picom-toggle.sh")
    , ("M1-C-t", spawn "xterm")

    , ("M1-p", spawn "pavucontrol")

    , ("<Print>", spawn "flameshot full -p /home/eko/Pictures")

    , ("M-c", spawn "playerctl play-pause")
    , ("M-S-v", spawn "playerctl next")
    , ("M-S-x", spawn "playerctl previous")

    , ("M-j", windows W.focusDown)
    , ("M-k", windows W.focusUp)

    , ("M-S-j", windows W.swapDown)
    , ("M-S-k", windows W.swapUp)

    --  Reset the layouts on the current workspace to default
    -- , ("M-S-<Space>", setLayout $ myLayout.tiled)

    -- Resize viewed windows to the correct size
    , ("M-n", refresh)

    -- Move focus to the master window
    , ("M-m", windows W.focusMaster)

    -- Swap the focused window and the master window
    , ("M-S-<Return>", windows W.swapMaster)

    -- Shrink/expand the master area
    , ("M-h", sendMessage Shrink)
    , ("M-l", sendMessage Expand)

    -- Push window back into tiling
    , ("M-S-t", withFocused $ windows . W.sink)

    -- (De)Increment the number of windows in the master area
    -- , ("M-,", sendMessage IncMasterN +1)
    -- , ("M-.", sendMessage IncMasterN -1)

    -- Toggle the status bar gap
    -- Use this binding with avoidStruts from Hooks.ManageDocks.
    -- See also the statusBar function from Hooks.DynamicLog.
    -- , ((modm              , xK_b     ), sendMessage ToggleStruts)

    ]
    ++
    [("M-" ++ m ++ k, windows $ f i)
        | (i, k) <- zip (myWorkspaces) (map show([1 .. 9] ++ [0] :: [Int]))
        , (f, m) <- [(W.greedyView, ""), (W.shift, "S-")]]




------------------------------------------------------------------------
-- Mouse bindings: default actions bound to mouse events
--
myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $

    -- mod-button1, Set the window to floating mode and move by dragging
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))

    -- mod-button2, Raise the window to the top of the stack
    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))

    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))

    -- you may also bind events to the mouse scroll wheel (button4 and button5)
    ]

------------------------------------------------------------------------
-- Layouts:

-- You can specify and transform your layouts by modifying these values.
-- If you change layout bindings be sure to use 'mod-shift-space' after
-- restarting (with 'mod-q') to reset your layout state to the new
-- defaults, as xmonad preserves your old layout settings by default.
--
-- The available layouts.  Note that each layout is separated by |||,
-- which denotes layout choice.
--
myLayout = avoidStruts ( tiled ||| Mirror tiled ||| Full )
  where
     -- default tiling algorithm partitions the screen into two panes
     tiled   = Tall nmaster delta ratio

     -- The default number of windows in the master pane
     nmaster = 1

     -- Default proportion of screen occupied by master pane
     ratio   = 1/2

     -- Percent of screen to increment by when resizing panes
     delta   = 3/100

------------------------------------------------------------------------
-- Window rules:

-- Execute arbitrary actions and WindowSet manipulations when managing
-- a new window. You can use this to, for example, always float a
-- particular program, or have a client always appear on a particular
-- workspace.
--
-- To find the property name associated with a program, use
-- > xprop | grep WM_CLASS
-- and click on the client you're interested in.
--
-- To match on the WM_NAME, you can use 'title' in the same way that
-- 'className' and 'resource' are used below.
--
myManageHook = composeAll
    [ className =? "MPlayer"        --> doFloat
    , className =? "Gimp"           --> doFloat
    , resource  =? "desktop_window" --> doIgnore
    , resource  =? "kdesktop"       --> doIgnore ]

------------------------------------------------------------------------
-- Event handling

-- * EwmhDesktops users should change this to ewmhDesktopsEventHook
--
-- Defines a custom handler function for X Events. The function should
-- return (All True) if the default handler is to be run afterwards. To
-- combine event hooks use mappend or mconcat from Data.Monoid.
--
myEventHook = mempty

------------------------------------------------------------------------
-- Status bars and logging

-- Perform an arbitrary action on each internal state change or X event.
-- See the 'XMonad.Hooks.DynamicLog' extension for examples.
--
myLogHook = return ()

------------------------------------------------------------------------
-- Startup hook

-- Perform an arbitrary action each time xmonad starts or is restarted
-- with mod-q.  Used by, e.g., XMonad.Layout.PerWorkspace to initialize
-- per-workspace layout choices.
--
-- By default, do nothing.
myStartupHook = do
  spawnOnce "clipmenud"
  spawnOnce "watch -n 60 feh --randomize --bg-fill ~/Pictures/wallpapers/Riced/* & disown"
  spawnOnce "emacs /usr/bin/emacs --daemon"
  spawnOnce "xset s off -dpms"
  spawnOnce "xinput --set-prop 'pointer:''Micro-Star INT'L CO., LTD. MSI GM41 Light Weight Wireless Mode Gaming Mouse' 'libinput Accel Profile Enabled' 0, 1'"
  spawnOnce "xinput --set-prop 'pointer:''Micro-Star INT'L CO., LTD. MSI GM41 Light Weight Wireless Mode Gaming Mouse' 'libinput Accel Speed' -0.2"
  spawnOnce "picom --config /home/eko/.config/picom/picom.conf"
  spawnOnce "dunst"

------------------------------------------------------------------------
-- Now run xmonad with all the defaults we set up.

-- Run xmonad with the settings you specify. No need to modify this.
--
main = do

        xmproc <- spawnPipe "xmobar -x 1080 /home/eko/.config/xmobar/xmobar.config"
        xmonad $ docks defaults

-- A structure containing your configuration settings, overriding
-- fields in the default config. Any you don't override, will
-- use the defaults defined in xmonad/XMonad/Config.hs
--
-- No need to modify this.
--
defaults = def {
      -- simple stuff
        terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        clickJustFocuses   = myClickJustFocuses,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,

      -- key bindings
        keys               = myKeys,
        mouseBindings      = myMouseBindings,

      -- hooks, layouts
        layoutHook         = myLayout,
        manageHook         = myManageHook,
        handleEventHook    = myEventHook,
        logHook            = myLogHook,
        startupHook        = myStartupHook
    }
